# --- Configuración General de la Aplicación ---
spring.application.name=users-backend

# --- Configuración de Base de Datos (MySQL) ---
# ¡IMPORTANTE! Reemplaza con los detalles de tu base de datos en la nube
# Render tiene bases de datos gestionadas, o puedes usar un servicio externo como PlanetScale (MySQL)
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQLDialect
spring.jpa.show-sql=true
spring.jpa.hibernate.ddl-auto=update
# Cuidado: no usar 'update' en producción real.

# --- Configuración de Servidor de Correo (SMTP) ---
# Tu servidor de correo local (192.168.56.120) no será accesible desde la nube.
# Necesitas un servicio SMTP en la nube (ej. SendGrid, Mailgun, o SMTP de Gmail/Outlook para pruebas)
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=${MAIL_SMTP_AUTH:true}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_SMTP_STARTTLS_ENABLE:true}
spring.mail.properties.mail.smtp.starttls.required=${MAIL_SMTP_STARTTLS_REQUIRED:true}

# --- Configuración de Stripe ---
# Estas claves y URLs se cargarán desde las variables de entorno de Render.
stripe.secret.key=${STRIPE_SECRET_KEY}
stripe.webhook.url=${STRIPE_WEBHOOK_URL}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}
stripe.success.url=${STRIPE_SUCCESS_URL}
stripe.cancel.url=${STRIPE_CANCEL_URL}