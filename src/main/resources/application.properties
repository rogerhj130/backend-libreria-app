# --- Configuración de Base de Datos (MySQL) ---
# ¡IMPORTANTE! Aquí usarás los detalles de tu base de datos MySQL en Aiven
# Asegúrate de que tu DB_URL en Render incluya estos parámetros SSL si Render los permite directamente
# o usa las variables de entorno para cada parte (host, port, dbname, user, password)
spring.datasource.url=${DB_URL}
spring.datasource.username=${DB_USERNAME}
spring.datasource.password=${DB_PASSWORD}
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.show-sql=true



# AÑADE ESTAS LÍNEAS PARA LA CONFIGURACIÓN SSL DE MYSQL
# Esto le dice al driver de MySQL que use SSL
spring.datasource.hikari.properties.sslMode=REQUIRED
spring.datasource.hikari.properties.verifyServerCertificate=false # Para pruebas, no verificamos el certificado. En producción, es ideal configurarlo correctamente con el CA certificate de Aiven.
spring.datasource.hikari.properties.useSSL=true

# --- Configuración de Servidor de Correo (SMTP) ---
spring.mail.host=${MAIL_HOST}
spring.mail.port=${MAIL_PORT}
spring.mail.username=${MAIL_USERNAME}
spring.mail.password=${MAIL_PASSWORD}
spring.mail.properties.mail.smtp.auth=${MAIL_SMTP_AUTH:true}
spring.mail.properties.mail.smtp.starttls.enable=${MAIL_SMTP_STARTTLS_ENABLE:true}
spring.mail.properties.mail.smtp.starttls.required=${MAIL_SMTP_STARTTLS_REQUIRED:true}

# --- Configuración de Stripe ---
stripe.secret.key=${STRIPE_SECRET_KEY}
stripe.webhook.url=${STRIPE_WEBHOOK_URL}
stripe.webhook.secret=${STRIPE_WEBHOOK_SECRET}
stripe.success.url=${STRIPE_SUCCESS_URL}
stripe.cancel.url=${STRIPE_CANCEL_URL}